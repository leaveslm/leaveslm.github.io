<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux 安装 Redis]]></title>
    <url>%2F2018%2F07%2F25%2F2018-2018-07-25-Linux-%E5%AE%89%E8%A3%85-Redis%2F</url>
    <content type="text"><![CDATA[以 Redis 4.0.10 为例Redis 官方下载地址 下载、解压、编译下载 wget http://download.redis.io/releases/redis-4.0.10.tar.gz 解压 tar xzf redis-4.0.10.tar.gz 编译 cd redis-4.0.10make 启动 Redis前台启动 src/redis-server 测试 Redis 是否启动 src/redis-cli 如果输出以下内容，表示 Redis 已启动 127.0.0.1:6379&gt; set foo barOK127.0.0.1:6379&gt; get foo“bar” 后台启动修改 Redis 配置文件 redis.conf vi redis.conf 123***daemonize yes*** 开启外网访问确保 redis.conf 中 daemonize 为 yes，确保守护进程开启，Redis 可以在后台可以运行 把 Redis 端口放到防火墙计划中 /sbin/iptables -I INPUT -p tcp –dport 6379 -j ACCEPT 修改 Redis 配置文件 redis.conf vi redis.conf 12345***# bind 127.0.0.1***protected-mode no*** 重启 Redis，并指定配置文件 src/redis-cli shutdownsrc/redis-server ./redis.conf 设置 Redis 开机启动在 /etc 下新建 redis 文件夹 mkdir /etc/redis 把安装 Redis 根目录里面的 redis.conf 复制到 /etc/redis/6379.conf cp redis.conf /etc/redis/6379.conf 复制 Redis 启动脚本Redis 启动脚本一般在 Redis 根目录的 utils 目录下，如果不知道路径，可以先查看路径 find / -name redis_init_script 复制启动脚本到 /etc/init.d/redis 文件中 cp utils/redis_init_script /etc/init.d/redis 修改启动脚本参数 vi /etc/init.d/redis 指定 Redis 安装路径EXEC=…CLIEXEC=…123456789101112131415161718192021#!/bin/sh## Simple Redis init.d script conceived to work on Linux systems# as it does use of the /proc filesystem.### BEGIN INIT INFO# Provides: redis_6379# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: Redis data structure server# Description: Redis data structure server. See https://redis.io### END INIT INFOREDISPORT=6379EXEC=/usr/local/redis-4.0.10/src/redis-serverCLIEXEC=/usr/local/redis-4.0.10/src/redis-cliPIDFILE=/var/run/redis_$&#123;REDISPORT&#125;.pidCONF=&quot;/etc/redis/$&#123;REDISPORT&#125;.conf&quot;*** 关闭 Redis service redis stop 设为开机启动 chkconfig redis on 设为开机关闭 chkconfig redis off 启动 Redis service redis start 检查自启动项列表中没有 redis 这个 chkconfig –list redis 错误处理如果执行 make 报错，可能缺少某些依赖包 错误112345678910cd src &amp;&amp; make allmake[1]: 进入目录“/usr/local/redis-4.0.10/src” CC Makefile.depmake[1]: 离开目录“/usr/local/redis-4.0.10/src”make[1]: 进入目录“/usr/local/redis-4.0.10/src” CC adlist.o/bin/sh: cc: 未找到命令make[1]: *** [adlist.o] 错误 127make[1]: 离开目录“/usr/local/redis-4.0.10/src”make: *** [all] 错误 2 以上报错缺少 GCC，则如下命令安装： yum install gcc 错误21234567891011cd src &amp;&amp; make allmake[1]: 进入目录“/usr/local/redis-4.0.10/src” CC adlist.oIn file included from adlist.c:34:0:zmalloc.h:50:31: 致命错误：jemalloc/jemalloc.h：没有那个文件或目录 #include &lt;jemalloc/jemalloc.h&gt; ^编译中断。make[1]: *** [adlist.o] 错误 1make[1]: 离开目录“/usr/local/redis-4.0.10/src”make: *** [all] 错误 2 以上报错则如下命令解决： make MALLOC=libc]]></content>
      <categories>
        <category>基础服务</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 安装 MySQL 5.7]]></title>
    <url>%2F2018%2F07%2F18%2F2018-2018-07-18-Linux-%E5%AE%89%E8%A3%85-MySQL-5-7%2F</url>
    <content type="text"><![CDATA[MySQL 5.7.22 官方下载地址 清理 MySQL、下载解压清理 find / -name mysql | xargs rm -rf 下载 wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz 解压 tar -zxvf mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz 重命名 mv mysql-5.7.22-linux-glibc2.12-x86_64 mysql 创建 MySQL 组、用户查看有没有mysql组 cat /etc/group | grep mysql 查看有没有mysql用户 cat /etc/passwd |grep mysql 没有则创建 groupadd mysqluseradd -r -g mysql mysql 更改 mysql 目录下所有的目录及文件夹所属组合用户 chown -R mysql mysqlchgrp -R mysql mysqlcd mysqlls -l123456789drwxr-xr-x. 2 mysql mysql 4096 7月 18 15:04 bin-rw-r--r--. 1 mysql mysql 17987 3月 4 21:40 COPYINGdrwxr-xr-x. 2 mysql mysql 52 7月 18 15:04 docsdrwxr-xr-x. 3 mysql mysql 4096 7月 18 15:04 includedrwxr-xr-x. 5 mysql mysql 4096 7月 18 15:04 libdrwxr-xr-x. 4 mysql mysql 28 7月 18 15:04 man-rw-r--r--. 1 mysql mysql 2478 3月 4 21:40 READMEdrwxr-xr-x. 28 mysql mysql 4096 7月 18 15:04 sharedrwxr-xr-x. 2 mysql mysql 86 7月 18 15:08 support-files 修改 my.cnf 配置文件从 5.7.18 开始不在二进制包中提供 my-default.cnf 文件 vi /etc/my.cnf my-default.cnf12345678910111213141516171819202122232425262728293031# For advice on how to change settings please see# # *** DO NOT EDIT THIS FILE. It‘s a template which will be copied to the# *** default location during install, and will be replaced if you# *** upgrade to a newer version of MySQL.[mysqld]# Remove leading # and set to the amount of RAM for the most important data# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size = 128M# Remove leading # to turn on a very important data integrity option: logging# changes to the binary log between backups.# log_bin# These are commonly set, remove the # and set as required.# basedir = .....# datadir = .....# port = .....# server_id = .....# socket = .....# Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size = 128M# sort_buffer_size = 2M# read_rnd_buffer_size = 2M sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES my.cnf12345678910111213141516171819202122232425262728293031323334353637383940# For advice on how to change settings please see# # *** DO NOT EDIT THIS FILE. It‘s a template which will be copied to the# *** default location during install, and will be replaced if you# *** upgrade to a newer version of MySQL.[client]default-character-set = utf8[mysql]default-character-set = utf8socket = /var/lib/mysql/mysql.sock[mysqld]character-set-server = utf8# Remove leading # and set to the amount of RAM for the most important data# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size = 128M# Remove leading # to turn on a very important data integrity option: logging# changes to the binary log between backups.# log_bin# These are commonly set, remove the # and set as required.basedir = /usr/local/mysql/datadir = /usr/local/mysql/data/port = 3306#server_id = socket = /var/lib/mysql/mysql.sock# Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size = 128M# sort_buffer_size = 2M# read_rnd_buffer_size = 2Mmax_connections = 1000sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 初始化 MySQL 数据库初始化 cd /usr/local/mysql./bin/mysqld –user=mysql –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data –initialize 输出如下：123456782018-07-18T07:06:49.223422Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).2018-07-18T07:06:49.223579Z 0 [Warning] &apos;NO_ZERO_DATE&apos;, &apos;NO_ZERO_IN_DATE&apos; and &apos;ERROR_FOR_DIVISION_BY_ZERO&apos; sql modes should be used with strict mode. They will be merged with strict mode in a future release.2018-07-18T07:06:49.223591Z 0 [Warning] &apos;NO_AUTO_CREATE_USER&apos; sql mode was not set.2018-07-18T07:06:50.630648Z 0 [Warning] InnoDB: New log files created, LSN=457902018-07-18T07:06:51.000475Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.2018-07-18T07:06:51.028751Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 24e198b5-8a59-11e8-9a33-aeceb5cf96b1.2018-07-18T07:06:51.031122Z 0 [Warning] Gtid table is not ready to be used. Table &apos;mysql.gtid_executed&apos; cannot be opened.2018-07-18T07:06:51.045661Z 1 [Note] A temporary password is generated for root@localhost: Ra%p1C(&gt;7J(p 添加 RSA Key cd /usr/local/mysqlbin/mysql_ssl_rsa_setup –datadir=/usr/local/mysql/data123456789101112131415Generating a 2048 bit RSA private key..+++.......................................................+++writing new private key to &apos;ca-key.pem&apos;-----Generating a 2048 bit RSA private key....................................................................+++...........................................................+++writing new private key to &apos;server-key.pem&apos;-----Generating a 2048 bit RSA private key..............................................................................................................................................+++..................................+++writing new private key to &apos;client-key.pem&apos;----- 编辑 /usr/local/mysql/support-files/mysql.server 文件 vi /usr/local/mysql/support-files/mysql.server1234...修改 basedir = /usr/local/mysql/修改 datadir = /usr/local/mysql/data/... 启动 MySQL 服务 cd /usr/local/mysql./support-files/mysql.server start 注意：如果遇到以下问题，执行以下操作Starting MySQL.Logging to ‘/usr/local/mysql/data/localhost.localdomain.err’.2018-07-18T07:08:26.909710Z mysqld_safe Directory ‘/var/lib/mysql’ for UNIX socket file don’t exists. mkdir /var/lib/mysqlchown mysql:mysql /var/lib/mysqlcd /usr/local/mysql./support-files/mysql.server start Starting MySQL… SUCCESS! ./support-files/mysql.server stop Shutting down MySQL… SUCCESS! ./support-files/mysql.server restart Shutting down MySQL… SUCCESS!Starting MySQL… SUCCESS! 修改 Root 密码，开启远程访问 cd /usr/local/mysql./bin/mysqld_safe –skip-grant-tables –skip-networking&amp; 登陆 cd /usr/local/mysql/bin./mysql -uroot -p 修改密码、授权远程登陆 mysql&gt;set password=password(“123456”);use mysql;update user set host=’%’ where user=’root’;GRANT ALL PRIVILEGES ON . TO ‘myuser‘@’%’ IDENTIFIED BY ‘mypwd’ WITH GRANT OPTION;FLUSH PRIVILEGES;exit; 重启 MySQL 服务 service mysql restart; 查看编码 show variables like ‘character%’; 配置 MySQL 服务开机自动启动拷贝启动文件到 /etc/init.d/ 下并重命令为 mysqld cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld 增加执行权限 chmod 755 /etc/init.d/mysqld 检查自启动项列表中没有 mysqld 这个，如果没有就添加 mysqld chkconfig –list mysqldchkconfig –add mysqld 设置MySQL在345等级自动启动 chkconfig –level 345 mysqld on 或用这个命令设置开机启动: chkconfig mysqld on MySQL 服务的启动/重启/停止启动 MySQL 服务 service mysqld start 停止 MySQL 服务 service mysqld stop 重启 MySQL 服务 service mysqld restart]]></content>
      <categories>
        <category>基础服务</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 10 修改控制台字体]]></title>
    <url>%2F2018%2F05%2F07%2F2018-2018-05-07-Windows-10-%E4%BF%AE%E6%94%B9%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%AD%97%E4%BD%93%2F</url>
    <content type="text"><![CDATA[用过 Mac、Linux 的用户都会觉得这两个系统的 Terminal 字体相比 Windows 的看起来舒服很多，其实 Windows 控制台字体也是可以更改的，比如更改成等宽字体，下面的是更改方法，可以参考。控制台背景改成白色，字体改成黑色显示效果更佳。推荐一款字体：Menlo字体下载：点击下载 Win+R: regedit，打开注册表编辑器添加字体[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Console\TrueTypeFont]添加字符串值: “000” -&gt; Menlo (自选字体) 修改字符编码[HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe]修改 “CodePage”=REG_DWORD: 0x0000fde9 (65001)添加(可选) “FaceName”=REG_SZ: Menlo 【注】十六进制”000003a8”或十进制”936”，表示“936 (ANSI/OEM - 简体中文 GBK)” ————————————– END ————————————– 附: chcp详解功能说明显示活动控制台代码页数量，或更改该控制台的活动控制台代码页。如果在没有参数的情况下使用，则 chcp 显示活动控制台代码页的数量。 补充说明只有随 XOX 一起安装的原始设备制造商 (OEM) 代码页才能在使用 Raster 字体的命令提示符窗口中正常显示。其他代码页则可在全屏幕模式下或者在使用 TrueType 字体的命令提示符窗口中正确显示。 就像在 MS-DOS 中一样，您不必准备代码页。 在指派了新代码页之后启动的程序将使用该新代码页，但如果程序（除了 Cmd.exe）是在指派新代码页之前启动的，那么该程序将使用原来的代码页。 语法chcp [NNN] 参数NNN 指定代码页。下表列出了MSDOS所有支持的代码页及其国家（地区）或者语言：代码页 国家（地区）或语言437 美国850 多语言（拉丁文 I）852 斯拉夫语（拉丁文 II）855 西里尔文（俄语）857 土耳其语860 葡萄牙语861 冰岛语863 加拿大 - 法语865 日耳曼语866 俄语869 现代希腊语936 简体中文950 繁体中文65001 UTF-8 /? 在命令提示符下显示帮助。 示例： 要查看活动代码页设置，请键入：chcp 出现类似于下面内容的消息：活动代码页：437 如果要将活动代码页更改为 850（多语言），请键入：chcp 850 如果指定的代码页无效，则会显示以下错误消息：无效代码页]]></content>
      <categories>
        <category>DIY</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 安装 MySQL 5.7]]></title>
    <url>%2F2018%2F04%2F24%2F2018-2018-04-24-Windows-%E5%AE%89%E8%A3%85-MySQL-5-7%2F</url>
    <content type="text"><![CDATA[MySQL 5.7.xx ZIP版本配置方案MySQL 5.7.22 官方下载地址MySQL 官方配置参数查询 一、下载 MySQL 5.7.xx zip 安装包本机以 Windows10 64 位系统为例进入 Oracel 官网，选择 MySQL Windows (x86, 64-bit), ZIP Archive 下载包点此下载 二、解压安装包将MySQL数据库解压至目录 D:\Program Files\MySQL\mysql-5.7.xx-winx64将 D:\Program Files\MySQL\mysql-5.7.xx-winx64\bin 添加至环境变量 Path 中 三、创建一个空文件夹，命名为“data”，用来存放数据本机创建在 D:\Program Files\MySQL\mysql-5.7.xx-winx64 目录下，所以最后会看到D:\Program Files\MySQL\mysql-5.7.xx-winx64\data，此文件夹后面会有用到 四、配置启动配置文件把 D:\Program Files\MySQL\mysql-5.7.xx-winx64\my-default.ini 文件复制一份，重新命名为 my.ini，修改里面的几个参数， 配置文件如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# For advice on how to change settings please see# http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html# *** DO NOT EDIT THIS FILE. It&apos;s a template which will be copied to the# *** default location during install, and will be replaced if you# *** upgrade to a newer version of MySQL.[client]default-character-set=utf8[mysql]default-character-set=utf8[mysqld]character-set-server=utf8# Remove leading # and set to the amount of RAM for the most important data# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size = 128M# Remove leading # to turn on a very important data integrity option: logging# changes to the binary log between backups.# log_bin# These are commonly set, remove the # and set as required.# server_id = .....# MySQL 安装目录basedir = D:\Program Files\MySQL\mysql-5.7.22-winx64# MySQL 数据库数据存放目录datadir = D:\Program Files\MySQL\mysql-5.7.22-winx64\data# MySQL 端口port = 3306# 允许最大连接数，默认200max_connections=200# Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size = 128M# sort_buffer_size = 2M# read_rnd_buffer_size = 2Msql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB# explicit_defaults_for_timestamp=true 五、初始化数据目录 管理员身份打开 CMD; 当前路径定位到 D:\Program Files\MySQL\mysql-5.7.xx-winx64\bin 按照mysql官方文档给出的步骤还有一步 Selecting a MySQL Server Type，就是选择用 mysqld 还是 mysqld-debug. 一般使用如下命令： mysqld –defaults-file=”D:\Program Files\MySQL\mysql-5.7.xx-winx64\my.ini” –initialize-insecure 注： 这个命令很重要，它会初始化 data 目录，在执行此命令前请先把 data 目录下的所有文件先删除，否则会失败； 可以选择用 –initialize-insecure 或者 –initialize 来初始化，–initialize-insecure 初始化 root 密码为空，如果用 –initialize 来初始化，会产生一个随机密码； 执行成功后你会在 data 目录 下看到 mysql，perofrmance_schema，sys 目录，同时还会有一些文件。 六、安装 mysql 服务 mysqld -installmysqld -remove （出问题重新配置前需要卸载服务） 七、启动 mysql 服务、添加初始密码 net start mysqlmysqladmin -u root password 123456mysql -u root -p 八、设置默认编码先确保my.ini添加以下代码12345678[client]default-character-set=utf8[mysql]default-character-set=utf8[mysqld]default-character-set=utf8 或者 character-set-server=utf8 通过命令查看数据库当前编码 mysql -u root -pshow variables like ‘character%’; 如果不是以下编码，则设置编码12345678910111213+--------------------------+------------------------------------------------------------+| Variable_name | Value |+--------------------------+------------------------------------------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | utf8 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | utf8 || character_set_system | utf8 || character_sets_dir | D:\Program Files\MySQL\mysql-5.7.22-winx64\share\charsets\ |+--------------------------+------------------------------------------------------------+8 rows in set, 1 warning (0.00 sec) 设置编码： SET character_set_client = utf8;SET character_set_connection = utf8;SET character_set_database = utf8;SET character_set_results = utf8;SET character_set_server = utf8; character_set_client为客户端编码方式； character_set_connection为建立连接使用的编码； character_set_database数据库的编码； character_set_results结果集的编码； character_set_server数据库服务器的编码； 九、mysql 开启远程连接 grant all privileges on *.* to ‘root‘@’%’ identified by ‘123456’ with grant option; 后记：如果中途有什么步骤失败，一定要执行 mysql 移除命令，然后删除 data 目录下的所有文件，然后删除服务 mysqld -remove特别提醒：5.7 和 5.6 不太相同，要自己初始化数据 data 目录，不然启动不会成功 十、后记mysql 安装完后可能会用到的语句123456789101112131415161718192021222324alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;123&apos;;create database victor;create user &apos;victor&apos;@&apos;localhost&apos; identified by &apos;victor@123&apos;;flush privileges;creaet user &apos;victorremote&apos;@&apos;%&apos; identified by &apos;victorremote@123&apos;;flush privileges;grant all on victor.* to &apos;victor&apos;@&apos;localhost&apos; identified by &apos;victor@123&apos;;flush privileges;grant all on victor.* to &apos;victorremote&apos;@&apos;%&apos; identified by &apos;victorremote@123&apos;;flush privileges;#################################连接最大空闲时长SHOW GLOBAL VARIABLES LIKE &apos;wait_timeout&apos;;#最大连接数SHOW VARIABLES LIKE &apos;%max_connections%&apos;;SET GLOBAL max_connections = 200;#字符编码SHOW VARIABLES WHERE Variable_name LIKE &apos;character\_set\_%&apos; OR Variable_name LIKE &apos;collation%&apos;;SHOW GLOBAL STATUS LIKE &apos;innodb_buffer_pool_pages_%&apos;;SHOW PROCESSLIST;SHOW STATUS LIKE &apos;Table%&apos;;SHOW STATUS LIKE &apos;%lock%&apos;;################################]]></content>
      <categories>
        <category>基础服务</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[地图坐标转换]]></title>
    <url>%2F2017%2F09%2F24%2F2017-2017-09-24-%E5%9C%B0%E5%9B%BE%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[问题来源目前 IoT 领域各种智能设备都可以采集 GPS 数据，但是设备采集到的GPS都是 WGS-84 坐标系数据，在国内不能直接用于在地图上显示，需要进行一定转换。各地图工具都有坐标转换 API 可用，但是成千上万的 GPS 数据通过 API 转换是一件很消耗资源的事，所以需要提供一种离线转换的方式。 本人在项目中曾也用过 API 转换的方式，但是当设备数量一增加，在坐标转换这一个小功能上带来了巨大的资源开销，是一件很不划算事，因此想到利用算法替换 API 方式进行坐标转换。在查阅了一些资料和自己的整理后，进行了一下总结。 大地坐标系（WGS-84）大地坐标系是大地测量中以参考椭球面为基准面建立起来的坐标系。地面点的位置用大地经度、大地纬度和大地高度表示。大地坐标系的确立包括选择一个椭球、对椭球进行定位和确定大地起算数据。 火星坐标系（GCJ-02）是一种国家保密插件，也叫做加密插件或者加偏或者SM模组，其实就是对真实坐标系统进行人为的加偏处理，按照特殊的算法，将真实的坐标加密成虚假的坐标，而这个加偏并不是线性的加偏，所以各地的偏移情况都会有所不同。而加密后的坐标也常被人称为火星坐标系统。所有的电子地图、导航设备，都需要加入国家保密插件。第一步，地图公司测绘地图，测绘完成后，送到国家测绘局，将真实坐标的电子地图，加密成“火星坐标”，这样的地图才是可以出版和发布的，然后才可以让GPS公司处理。第二步，所有的GPS公司，只要需要汽车导航的，需要用到导航电子地图的，都需要在软件中加入国家保密算法，将COM口读出来的真实的坐标信号，加密转换成国家要求的保密的坐标。这样，GPS导航仪和导航电子地图就可以完全匹配，GPS也就可以正常工作了。 百度坐标系（BD-09）百度坐标对火星坐标系进行了一次加密，形成了百度坐标系。 具体实现附上坐标转化详细 Java 版代码，Java 版本最低要求 Java 8代码中也提供了两种判断 WGS-84 坐标点是否在国内的方法，一种是很粗略的判断，另一种较为精确，但沿海、国界周边地区可能会有误差，更高精度需要自行调整坐标点。public class GpsCoordinateUtil &#123; //private static final double PI = 3.1415926535897932384626433832795; private static final double PI = 3.14159265358979324; private static final double A = 6378245.0; private static final double EE = 0.00669342162296594323; /** * 地球坐标系 WGS-84 to 火星坐标系 GCJ-02 * * @param latitude 纬度 * @param longitude 经度 * @return [纬度, 经度] */ public static double[] calWGS84toGCJ02(double latitude, double longitude) &#123; Point dev = calDev(latitude, longitude); double retLat = latitude + dev.getLatitude(); double retLon = longitude + dev.getLongitude(); return new double[]&#123;retLat, retLon&#125;; &#125; /** * 地球坐标系 WGS-84 to 百度坐标系 BD-09 * * @param latitude 纬度 * @param longitude 经度 * @return [纬度, 经度] */ public static double[] calWGS84toBD09(double latitude, double longitude) &#123; Point dev = calDev(latitude, longitude); double retLat = latitude + dev.getLatitude(); double retLon = longitude + dev.getLongitude(); return calGCJ02toBD09(retLat, retLon); &#125; /** * 火星坐标系 GCJ-02 to 地球坐标系 WGS-84 * * @param latitude 纬度 * @param longitude 经度 * @return [纬度, 经度] */ public static double[] calGCJ02toWGS84(double latitude, double longitude) &#123; Point dev = calDev(latitude, longitude); double retLat = latitude - dev.getLatitude(); double retLon = longitude - dev.getLongitude(); dev = calDev(retLat, retLon); retLat = latitude - dev.getLatitude(); retLon = longitude - dev.getLongitude(); return new double[]&#123;retLat, retLon&#125;; &#125; /** * 百度坐标系 BD-09 to 地球坐标系 WGS-84 * * @param latitude 纬度 * @param longitude 经度 * @return [纬度, 经度] */ public static double[] calBD09toWGS84(double latitude, double longitude) &#123; double[] gcj = calBD09toGCJ02(latitude, longitude); return calGCJ02toWGS84(gcj[0], gcj[1]); &#125; private static Point calDev(double latitude, double longitude) &#123; if (isOutOfChina(latitude, longitude, false)) &#123; return new Point(latitude, latitude); &#125; double dLat = calLat(longitude - 105.0, latitude - 35.0); double dLon = calLon(longitude - 105.0, latitude - 35.0); double radLat = latitude / 180.0 * PI; double magic = Math.sin(radLat); magic = 1 - EE * magic * magic; double sqrtMagic = Math.sqrt(magic); dLat = (dLat * 180.0) / ((A * (1 - EE)) / (magic * sqrtMagic) * PI); dLon = (dLon * 180.0) / (A / sqrtMagic * Math.cos(radLat) * PI); return new Point(dLat, dLon); &#125; private static double calLat(double x, double y) &#123; double ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * Math.sqrt(Math.abs(x)); ret += (20.0 * Math.sin(6.0 * x * PI) + 20.0 * Math.sin(2.0 * x * PI)) * 2.0 / 3.0; ret += (20.0 * Math.sin(y * PI) + 40.0 * Math.sin(y / 3.0 * PI)) * 2.0 / 3.0; ret += (160.0 * Math.sin(y / 12.0 * PI) + 320 * Math.sin(y * PI / 30.0)) * 2.0 / 3.0; return ret; &#125; private static double calLon(double x, double y) &#123; double ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * Math.sqrt(Math.abs(x)); ret += (20.0 * Math.sin(6.0 * x * PI) + 20.0 * Math.sin(2.0 * x * PI)) * 2.0 / 3.0; ret += (20.0 * Math.sin(x * PI) + 40.0 * Math.sin(x / 3.0 * PI)) * 2.0 / 3.0; ret += (150.0 * Math.sin(x / 12.0 * PI) + 300.0 * Math.sin(x / 30.0 * PI)) * 2.0 / 3.0; return ret; &#125; /** * 火星坐标系 GCJ-02 to 百度坐标系 BD-09 * * @param latitude 纬度 * @param longitude 经度 * @return [纬度, 经度] */ public static double[] calGCJ02toBD09(double latitude, double longitude) &#123; double x = longitude, y = latitude; double z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * PI); double theta = Math.atan2(y, x) + 0.000003 * Math.cos(x * PI); double retLat = z * Math.sin(theta) + 0.006; double retLon = z * Math.cos(theta) + 0.0065; return new double[]&#123;retLat, retLon&#125;; &#125; /** * 百度坐标系 BD-09 to 火星坐标系 GCJ-02 * * @param latitude 纬度 * @param longitude 经度 * @return [纬度, 经度] */ public static double[] calBD09toGCJ02(double latitude, double longitude) &#123; double x = longitude - 0.0065, y = latitude - 0.006; double z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * PI); double theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * PI); double retLat = z * Math.sin(theta); double retLon = z * Math.cos(theta); return new double[]&#123;retLat, retLon&#125;; &#125; /** * 判断坐标是否在国内 * * @param latitude * @param longitude * @param precision 是否精确判断范围 * @return true 在国外，false 在国内 */ private static boolean isOutOfChina(double latitude, double longitude, boolean precision) &#123; if (precision) &#123; return CHINA_POLYGON.stream().noneMatch(point -&gt; pointInPolygon(point, latitude, longitude)); &#125; else &#123; if (longitude &lt; 72.004 || longitude &gt; 137.8347) &#123; return true; &#125; if (latitude &lt; 0.8293 || latitude &gt; 55.8271) &#123; return true; &#125; return false; &#125; &#125; /** * 检查坐标点是否在多边形区域内 * * @param polygon 多边形 * @param latitude 纬度 * @param longitude 经度 * @return true 在多边形区域内，false 在多边形区域外 */ private static boolean pointInPolygon(Point[] polygon, double latitude, double longitude) &#123; int i, j = polygon.length - 1; boolean oddNodes = false; for (i = 0; i &lt; polygon.length; i++) &#123; if ((polygon[i].getLatitude() &lt; latitude &amp;&amp; polygon[j].getLatitude() &gt;= latitude || polygon[j].getLatitude() &lt; latitude &amp;&amp; polygon[i].getLatitude() &gt;= latitude) &amp;&amp; (polygon[i].getLongitude() &lt;= longitude || polygon[j].getLongitude() &lt;= longitude)) &#123; if (polygon[i].getLongitude() + (latitude - polygon[i].getLatitude()) / (polygon[j].getLatitude() - polygon[i].getLatitude()) * (polygon[j].getLongitude() - polygon[i].getLongitude()) &lt; longitude) &#123; oddNodes = !oddNodes; &#125; &#125; j = i; &#125; return oddNodes; &#125; static class Point &#123; private double longitude; private double latitude; Point(double latitude, double longitude) &#123; this.longitude = longitude; this.latitude = latitude; &#125; public double getLongitude() &#123; return longitude; &#125; public void setLongitude(double longitude) &#123; this.longitude = longitude; &#125; public double getLatitude() &#123; return latitude; &#125; public void setLatitude(double latitude) &#123; this.latitude = latitude; &#125; @Override public String toString() &#123; return longitude + "," + latitude; &#125; &#125; //region 中国行政边界的WGS84坐标数据 //Mainland private static final Point[] MAINLAND = new Point[]&#123; new Point(27.32083, 88.91693), new Point(27.54243, 88.76464), new Point(28.00805, 88.83575), new Point(28.1168, 88.62435), new Point(27.86605, 88.14279), new Point(27.82305, 87.19275), new Point(28.11166, 86.69527), new Point(27.90888, 86.45137), new Point(28.15805, 86.19769), new Point(27.88625, 86.0054), new Point(28.27916, 85.72137), new Point(28.30666, 85.11095), new Point(28.59104, 85.19518), new Point(28.54444, 84.84665), new Point(28.73402, 84.48623), new Point(29.26097, 84.11651), new Point(29.18902, 83.5479), new Point(29.63166, 83.19109), new Point(30.06923, 82.17525), new Point(30.33444, 82.11123), new Point(30.385, 81.42623), new Point(30.01194, 81.23221), new Point(30.20435, 81.02536), new Point(30.57552, 80.207), new Point(30.73374, 80.25423), new Point(30.96583, 79.86304), new Point(30.95708, 79.55429), new Point(31.43729, 79.08082), new Point(31.30895, 78.76825), new Point(31.96847, 78.77075), new Point(32.24304, 78.47594), new Point(32.5561, 78.40595), new Point(32.63902, 78.74623), new Point(32.35083, 78.9711), new Point(32.75666, 79.52874), new Point(33.09944, 79.37511), new Point(33.42863, 78.93623), new Point(33.52041, 78.81387), new Point(34.06833, 78.73581), new Point(34.35001, 78.98535), new Point(34.6118, 78.33707), new Point(35.28069, 78.02305), new Point(35.49902, 78.0718), new Point(35.50133, 77.82393), new Point(35.6125, 76.89526), new Point(35.90665, 76.55304), new Point(35.81458, 76.18061), new Point(36.07082, 75.92887), new Point(36.23751, 76.04166), new Point(36.66343, 75.85984), new Point(36.73169, 75.45179), new Point(36.91156, 75.39902), new Point(36.99719, 75.14787), new Point(37.02782, 74.56543), new Point(37.17, 74.39089), new Point(37.23733, 74.91574), new Point(37.40659, 75.18748), new Point(37.65243, 74.9036), new Point(38.47256, 74.85442), new Point(38.67438, 74.35471), new Point(38.61271, 73.81401), new Point(38.88653, 73.70818), new Point(38.97256, 73.85235), new Point(39.23569, 73.62005), new Point(39.45483, 73.65569), new Point(39.59965, 73.95471), new Point(39.76896, 73.8429), new Point(40.04202, 73.99096), new Point(40.32792, 74.88089), new Point(40.51723, 74.8588), new Point(40.45042, 75.23394), new Point(40.64452, 75.58284), new Point(40.298, 75.70374), new Point(40.35324, 76.3344), new Point(41.01258, 76.87067), new Point(41.04079, 78.08083), new Point(41.39286, 78.39554), new Point(42.03954, 80.24513), new Point(42.19622, 80.23402), new Point(42.63245, 80.15804), new Point(42.81565, 80.25796), new Point(42.88545, 80.57226), new Point(43.02906, 80.38405), new Point(43.1683, 80.81526), new Point(44.11378, 80.36887), new Point(44.6358, 80.38499), new Point(44.73408, 80.51589), new Point(44.90282, 79.87106), new Point(45.3497, 81.67928), new Point(45.15748, 81.94803), new Point(45.13303, 82.56638), new Point(45.43581, 82.64624), new Point(45.5831, 82.32179), new Point(47.20061, 83.03443), new Point(46.97332, 83.93026), new Point(46.99361, 84.67804), new Point(46.8277, 84.80318), new Point(47.0591, 85.52257), new Point(47.26221, 85.70139), new Point(47.93721, 85.53707), new Point(48.39333, 85.76596), new Point(48.54277, 86.59791), new Point(49.1102, 86.87602), new Point(49.09262, 87.34821), new Point(49.17295, 87.8407), new Point(48.98304, 87.89291), new Point(48.88103, 87.7611), new Point(48.73499, 88.05942), new Point(48.56541, 87.99194), new Point(48.40582, 88.51679), new Point(48.21193, 88.61179), new Point(47.99374, 89.08514), new Point(47.88791, 90.07096), new Point(46.95221, 90.9136), new Point(46.57735, 91.07027), new Point(46.29694, 90.92151), new Point(46.01735, 91.02651), new Point(45.57972, 90.68193), new Point(45.25305, 90.89694), new Point(45.07729, 91.56088), new Point(44.95721, 93.5547), new Point(44.35499, 94.71735), new Point(44.29416, 95.41061), new Point(44.01937, 95.34109), new Point(43.99311, 95.53339), new Point(43.28388, 95.87901), new Point(42.73499, 96.38206), new Point(42.79583, 97.1654), new Point(42.57194, 99.51012), new Point(42.67707, 100.8425), new Point(42.50972, 101.8147), new Point(42.23333, 102.0772), new Point(41.88721, 103.4164), new Point(41.87721, 104.5267), new Point(41.67068, 104.5237), new Point(41.58666, 105.0065), new Point(42.46624, 107.4758), new Point(42.42999, 109.3107), new Point(42.64576, 110.1064), new Point(43.31694, 110.9897), new Point(43.69221, 111.9583), new Point(44.37527, 111.4214), new Point(45.04944, 111.873), new Point(45.08055, 112.4272), new Point(44.8461, 112.853), new Point(44.74527, 113.638), new Point(45.38943, 114.5453), new Point(45.4586, 115.7019), new Point(45.72193, 116.2104), new Point(46.29583, 116.5855), new Point(46.41888, 117.3755), new Point(46.57069, 117.425), new Point(46.53645, 117.8455), new Point(46.73638, 118.3147), new Point(46.59895, 119.7068), new Point(46.71513, 119.9315), new Point(46.90221, 119.9225), new Point(47.66499, 119.125), new Point(47.99475, 118.5393), new Point(48.01125, 117.8046), new Point(47.65741, 117.3827), new Point(47.88805, 116.8747), new Point(47.87819, 116.2624), new Point(47.69186, 115.9231), new Point(47.91749, 115.5944), new Point(48.14353, 115.5491), new Point(48.25249, 115.8358), new Point(48.52055, 115.8111), new Point(49.83047, 116.7114), new Point(49.52058, 117.8747), new Point(49.92263, 118.5746), new Point(50.09631, 119.321), new Point(50.33028, 119.36), new Point(50.39027, 119.1386), new Point(51.62083, 120.0641), new Point(52.115, 120.7767), new Point(52.34423, 120.6259), new Point(52.54267, 120.7122), new Point(52.58805, 120.0819), new Point(52.76819, 120.0314), new Point(53.26374, 120.8307), new Point(53.54361, 123.6147), new Point(53.18832, 124.4933), new Point(53.05027, 125.62), new Point(52.8752, 125.6573), new Point(52.75722, 126.0968), new Point(52.5761, 125.9943), new Point(52.12694, 126.555), new Point(51.99437, 126.4412), new Point(51.38138, 126.9139), new Point(51.26555, 126.8176), new Point(51.31923, 126.9689), new Point(51.05825, 126.9331), new Point(50.74138, 127.2919), new Point(50.31472, 127.334), new Point(50.20856, 127.5861), new Point(49.80588, 127.515), new Point(49.58665, 127.838), new Point(49.58443, 128.7119), new Point(49.34676, 129.1118), new Point(49.4158, 129.4902), new Point(48.86464, 130.2246), new Point(48.86041, 130.674), new Point(48.60576, 130.5236), new Point(48.3268, 130.824), new Point(48.10839, 130.6598), new Point(47.68721, 130.9922), new Point(47.71027, 132.5211), new Point(48.09888, 133.0827), new Point(48.06888, 133.4843), new Point(48.39112, 134.4153), new Point(48.26713, 134.7408), new Point(47.99207, 134.5576), new Point(47.70027, 134.7608), new Point(47.32333, 134.1825), new Point(46.64017, 133.9977), new Point(46.47888, 133.8472), new Point(46.25363, 133.9016), new Point(45.82347, 133.4761), new Point(45.62458, 133.4702), new Point(45.45083, 133.1491), new Point(45.05694, 133.0253), new Point(45.34582, 131.8684), new Point(44.97388, 131.4691), new Point(44.83649, 130.953), new Point(44.05193, 131.298), new Point(43.53624, 131.1912), new Point(43.38958, 131.3104), new Point(42.91645, 131.1285), new Point(42.74485, 130.4327), new Point(42.42186, 130.6044), new Point(42.71416, 130.2468), new Point(42.88794, 130.2514), new Point(43.00457, 129.9046), new Point(42.43582, 129.6955), new Point(42.44624, 129.3493), new Point(42.02736, 128.9269), new Point(42.00124, 128.0566), new Point(41.58284, 128.3002), new Point(41.38124, 128.1529), new Point(41.47249, 127.2708), new Point(41.79222, 126.9047), new Point(41.61176, 126.5661), new Point(40.89694, 126.0118), new Point(40.47037, 124.8851), new Point(40.09362, 124.3736), new Point(39.82777, 124.128), new Point(39.8143, 123.2422), new Point(39.67388, 123.2167), new Point(38.99638, 121.648), new Point(38.8611, 121.6982), new Point(38.71909, 121.1873), new Point(38.91221, 121.0887), new Point(39.09013, 121.6794), new Point(39.2186, 121.5994), new Point(39.35166, 121.7511), new Point(39.52847, 121.2283), new Point(39.62322, 121.533), new Point(39.81138, 121.4683), new Point(40.00305, 121.881), new Point(40.50562, 122.2987), new Point(40.73874, 122.0521), new Point(40.92194, 121.1775), new Point(40.1961, 120.4468), new Point(39.87242, 119.5264), new Point(39.15693, 118.9715), new Point(39.04083, 118.3273), new Point(39.19846, 117.889), new Point(38.67555, 117.5364), new Point(38.38666, 117.6722), new Point(38.16721, 118.0281), new Point(38.1529, 118.8378), new Point(37.87832, 119.0355), new Point(37.30054, 118.9566), new Point(37.14361, 119.2328), new Point(37.15138, 119.7672), new Point(37.35228, 119.8529), new Point(37.83499, 120.7371), new Point(37.42458, 121.58), new Point(37.55256, 122.1282), new Point(37.41833, 122.1814), new Point(37.39624, 122.5586), new Point(37.20999, 122.5972), new Point(37.02583, 122.4005), new Point(37.01978, 122.5392), new Point(36.89361, 122.5047), new Point(36.84298, 122.1923), new Point(37.00027, 121.9566), new Point(36.75889, 121.5944), new Point(36.61666, 120.7764), new Point(36.52638, 120.96), new Point(36.37582, 120.8753), new Point(36.42277, 120.7062), new Point(36.14075, 120.6956), new Point(36.0419, 120.3436), new Point(36.26345, 120.3078), new Point(36.19998, 120.0889), new Point(35.95943, 120.2378), new Point(35.57893, 119.6475), new Point(34.88499, 119.1761), new Point(34.31145, 120.2487), new Point(32.97499, 120.8858), new Point(32.63889, 120.8375), new Point(32.42958, 121.3348), new Point(32.11333, 121.4412), new Point(32.02166, 121.7066), new Point(31.67833, 121.8275), new Point(31.86639, 120.9444), new Point(32.09361, 120.6019), new Point(31.94555, 120.099), new Point(32.30638, 119.8267), new Point(32.26277, 119.6317), new Point(31.90388, 120.1364), new Point(31.98833, 120.7026), new Point(31.81944, 120.7196), new Point(31.30889, 121.6681), new Point(30.97986, 121.8828), new Point(30.85305, 121.8469), new Point(30.56889, 120.9915), new Point(30.33555, 120.8144), new Point(30.39298, 120.4586), new Point(30.19694, 120.15), new Point(30.31027, 120.5082), new Point(30.06465, 120.7916), new Point(30.30458, 121.2808), new Point(29.96305, 121.6778), new Point(29.88211, 122.1196), new Point(29.51167, 121.4483), new Point(29.58916, 121.9744), new Point(29.19527, 121.9336), new Point(29.18388, 121.8119), new Point(29.37236, 121.7969), new Point(29.19729, 121.7444), new Point(29.29111, 121.5611), new Point(29.1634, 121.4135), new Point(29.02194, 121.6914), new Point(28.9359, 121.4908), new Point(28.72798, 121.6113), new Point(28.84215, 121.1464), new Point(28.66993, 121.4844), new Point(28.34722, 121.6417), new Point(28.13889, 121.3419), new Point(28.38277, 121.1651), new Point(27.98222, 120.9353), new Point(28.07944, 120.5908), new Point(27.87229, 120.84), new Point(27.59319, 120.5812), new Point(27.45083, 120.6655), new Point(27.20777, 120.5075), new Point(27.28278, 120.1896), new Point(27.14764, 120.4211), new Point(26.89805, 120.0332), new Point(26.64465, 120.128), new Point(26.51778, 119.8603), new Point(26.78823, 120.0733), new Point(26.64888, 119.8668), new Point(26.79611, 119.7879), new Point(26.75625, 119.5503), new Point(26.44222, 119.8204), new Point(26.47388, 119.5775), new Point(26.33861, 119.658), new Point(26.36777, 119.9489), new Point(25.99694, 119.4253), new Point(26.14041, 119.0975), new Point(25.93788, 119.354), new Point(25.99069, 119.7058), new Point(25.67996, 119.5807), new Point(25.68222, 119.4522), new Point(25.35333, 119.6454), new Point(25.60649, 119.3149), new Point(25.42097, 119.1053), new Point(25.25319, 119.3526), new Point(25.17208, 119.2726), new Point(25.2426, 118.8749), new Point(24.97194, 118.9866), new Point(24.88291, 118.5729), new Point(24.75673, 118.7631), new Point(24.52861, 118.5953), new Point(24.53638, 118.2397), new Point(24.68194, 118.1688), new Point(24.44024, 118.0199), new Point(24.46019, 117.7947), new Point(24.25875, 118.1237), new Point(23.62437, 117.1957), new Point(23.65919, 116.9179), new Point(23.355, 116.7603), new Point(23.42024, 116.5322), new Point(23.23666, 116.7871), new Point(23.21083, 116.5139), new Point(22.93902, 116.4817), new Point(22.73916, 115.7978), new Point(22.88416, 115.6403), new Point(22.65889, 115.5367), new Point(22.80833, 115.1614), new Point(22.70277, 114.8889), new Point(22.53305, 114.8722), new Point(22.64027, 114.718), new Point(22.81402, 114.7782), new Point(22.69972, 114.5208), new Point(22.50423, 114.6136), new Point(22.55004, 114.2223), new Point(22.42993, 114.3885), new Point(22.26056, 114.2961), new Point(22.36736, 113.9056), new Point(22.50874, 114.0337), new Point(22.47444, 113.8608), new Point(22.83458, 113.606), new Point(23.05027, 113.5253), new Point(23.11724, 113.8219), new Point(23.05083, 113.4793), new Point(22.87986, 113.3629), new Point(22.54944, 113.5648), new Point(22.18701, 113.5527), new Point(22.56701, 113.1687), new Point(22.17965, 113.3868), new Point(22.04069, 113.2226), new Point(22.20485, 113.0848), new Point(21.8693, 112.94), new Point(21.96472, 112.824), new Point(21.70139, 112.2819), new Point(21.91611, 111.8921), new Point(21.75139, 111.9669), new Point(21.77819, 111.6762), new Point(21.61264, 111.7832), new Point(21.5268, 111.644), new Point(21.52528, 111.0285), new Point(21.21138, 110.5328), new Point(21.37322, 110.3944), new Point(20.84381, 110.1594), new Point(20.84083, 110.3755), new Point(20.64, 110.3239), new Point(20.48618, 110.5274), new Point(20.24611, 110.2789), new Point(20.2336, 109.9244), new Point(20.4318, 110.0069), new Point(20.92416, 109.6629), new Point(21.44694, 109.9411), new Point(21.50569, 109.6605), new Point(21.72333, 109.5733), new Point(21.49499, 109.5344), new Point(21.39666, 109.1428), new Point(21.58305, 109.1375), new Point(21.61611, 108.911), new Point(21.79889, 108.8702), new Point(21.59888, 108.7403), new Point(21.93562, 108.4692), new Point(21.59014, 108.5125), new Point(21.68999, 108.3336), new Point(21.51444, 108.2447), new Point(21.54241, 107.99), new Point(21.66694, 107.7831), new Point(21.60526, 107.3627), new Point(22.03083, 106.6933), new Point(22.45682, 106.5517), new Point(22.76389, 106.7875), new Point(22.86694, 106.7029), new Point(22.91253, 105.8771), new Point(23.32416, 105.3587), new Point(23.18027, 104.9075), new Point(22.81805, 104.7319), new Point(22.6875, 104.3747), new Point(22.79812, 104.1113), new Point(22.50387, 103.9687), new Point(22.78287, 103.6538), new Point(22.58436, 103.5224), new Point(22.79451, 103.3337), new Point(22.43652, 103.0304), new Point(22.77187, 102.4744), new Point(22.39629, 102.1407), new Point(22.49777, 101.7415), new Point(22.20916, 101.5744), new Point(21.83444, 101.7653), new Point(21.14451, 101.786), new Point(21.17687, 101.2919), new Point(21.57264, 101.1482), new Point(21.76903, 101.099), new Point(21.47694, 100.6397), new Point(21.43546, 100.2057), new Point(21.72555, 99.97763), new Point(22.05018, 99.95741), new Point(22.15592, 99.16785), new Point(22.93659, 99.56484), new Point(23.08204, 99.5113), new Point(23.18916, 98.92747), new Point(23.97076, 98.67991), new Point(24.16007, 98.89073), new Point(23.92999, 97.54762), new Point(24.26055, 97.7593), new Point(24.47666, 97.54305), new Point(24.73992, 97.55255), new Point(25.61527, 98.19109), new Point(25.56944, 98.36137), new Point(25.85597, 98.7104), new Point(26.12527, 98.56944), new Point(26.18472, 98.73109), new Point(26.79166, 98.77777), new Point(27.52972, 98.69699), new Point(27.6725, 98.45888), new Point(27.54014, 98.31992), new Point(28.14889, 98.14499), new Point(28.54652, 97.55887), new Point(28.22277, 97.34888), new Point(28.46749, 96.65387), new Point(28.35111, 96.40193), new Point(28.525, 96.34027), new Point(28.79569, 96.61373), new Point(29.05666, 96.47083), new Point(28.90138, 96.17532), new Point(29.05972, 96.14888), new Point(29.25757, 96.39172), new Point(29.46444, 96.08315), new Point(29.03527, 95.38777), new Point(29.33346, 94.64751), new Point(29.07348, 94.23456), new Point(28.6692, 93.96172), new Point(28.61876, 93.35194), new Point(28.3193, 93.22205), new Point(28.1419, 92.71044), new Point(27.86194, 92.54498), new Point(27.76472, 91.65776), new Point(27.945, 91.66277), new Point(28.08111, 91.30138), new Point(27.96999, 91.08693), new Point(28.07958, 90.3765), new Point(28.24257, 90.38898), new Point(28.32369, 89.99819), new Point(28.05777, 89.48749), new Point(27.32083, 88.91693) &#125;; //Taiwan private static final Point[] TAIWAN = new Point[]&#123; new Point(25.13474, 121.4441), new Point(25.28361, 121.5632), new Point(25.00722, 122.0004), new Point(24.85028, 121.8182), new Point(24.47638, 121.8397), new Point(23.0875, 121.3556), new Point(21.92791, 120.7196), new Point(22.31277, 120.6103), new Point(22.54044, 120.3071), new Point(23.04437, 120.0539), new Point(23.61708, 120.1112), new Point(25.00166, 121.0017), new Point(25.13474, 121.4441) &#125;; //Hainan private static final Point[] HAINAN = new Point[]&#123; new Point(19.52888, 110.855), new Point(19.16761, 110.4832), new Point(18.80083, 110.5255), new Point(18.3852, 110.0503), new Point(18.39152, 109.7594), new Point(18.19777, 109.7036), new Point(18.50562, 108.6871), new Point(19.28028, 108.6283), new Point(19.76, 109.2939), new Point(19.7236, 109.1653), new Point(19.89972, 109.2572), new Point(19.82861, 109.4658), new Point(19.99389, 109.6108), new Point(20.13361, 110.6655), new Point(19.97861, 110.9425), new Point(19.63829, 111.0215), new Point(19.52888, 110.855) &#125;; //Chongming private static final Point[] CHONGMING = new Point[]&#123; new Point(31.80054, 121.2039), new Point(31.49972, 121.8736), new Point(31.53111, 121.5464), new Point(31.80054, 121.2039) &#125;; //endregion /** * 中国行政边界的WGS84坐标数据， * 光线投射算法 (Ray casting algorithm) 获得， * 沿海、国界周边地区可能会有误差，更高精度需要调整坐标点 */ private static final List&lt;Point[]&gt; CHINA_POLYGON = new ArrayList&lt;&gt;(); static &#123; CHINA_POLYGON.add(MAINLAND); CHINA_POLYGON.add(TAIWAN); CHINA_POLYGON.add(HAINAN); CHINA_POLYGON.add(CHONGMING); &#125; public static void main(String[] args) &#123; // WGS84坐标: 30.256676, 120.149987 Point gps = new Point(30.256676, 120.149987); System.out.println("WGS84 : " + gps); double[] wgsToGcj = calWGS84toGCJ02(gps.getLatitude(), gps.getLongitude()); System.out.println("WGS84 -&gt; GCJ02 : " + wgsToGcj[1] + "," + wgsToGcj[0]); double[] wgsToBd = calWGS84toBD09(gps.getLatitude(), gps.getLongitude()); System.out.println("WGS84 -&gt; BD09 : " + wgsToBd[1] + "," + wgsToBd[0]); double[] gcjToWgs = calGCJ02toWGS84(wgsToGcj[0], wgsToGcj[1]); System.out.println("GCJ02 -&gt; WGS84 : " + gcjToWgs[1] + "," + gcjToWgs[0]); double[] bdToWgs = calBD09toWGS84(wgsToBd[0], wgsToBd[1]); System.out.println("BD09 -&gt; WGS84 : " + bdToWgs[1] + "," + bdToWgs[0]); double[] gcjToBd = calGCJ02toBD09(wgsToGcj[0], wgsToGcj[1]); System.out.println("GCJ02 -&gt; BD09 : " + gcjToBd[1] + "," + gcjToBd[0]); double[] bdToGcj = calBD09toGCJ02(wgsToBd[0], wgsToBd[1]); System.out.println("BD09 -&gt; GCJ02 : " + bdToGcj[1] + "," + bdToGcj[0]); System.out.println("OutOfChina : " + isOutOfChina(30.256676, 120.149987, true)); &#125;&#125; 参考与感谢 Darel Rex Finley : Point-In-Polygon AlgorithmAimeast : 【WP7】判断GPS坐标是否在中国]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>地图</tag>
        <tag>GPS</tag>
      </tags>
  </entry>
</search>
